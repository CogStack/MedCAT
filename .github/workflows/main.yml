name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
      max-parallel: 4

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Check types
        run: |
          python -m mypy --follow-imports=normal medcat
      - name: Lint
        run: |
          flake8 medcat
      - name: Test
        run: |
          python -m unittest discover

  publish-to-test-pypi:

    runs-on: ubuntu-20.04
    concurrency: publish-to-test-pypi
    needs: [build]

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: 'master'
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Configure the version
        run: >-
          sed --in-place
          "s/node-and-date/no-local-version/g"
          setup.py

      - name: Determine if it's a pre-release
        id: check_prerelease
        # run: echo "IS_PRERELEASE=${{ github.event.release.prerelease }}" >> $GITHUB_ENV
        # NOTE: For the sake of normal workflow, all releases are pre-releases.
        #       The idea is that if the pre-release works, so does the regular release.
        #       The other option would be to run for pre-release and regular release
        #       but the trivial version for that would duplicate a bunch of the YAML.
        run: echo "IS_PRERELEASE=true" >> $GITHUB_ENV

      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .

      - name: Publish dev distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
          repository_url: https://test.pypi.org/legacy/
        continue-on-error: true
